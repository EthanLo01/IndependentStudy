{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML_make_model","provenance":[{"file_id":"1q9gjaDDiSl3a2NyyUVz0ephaC75hVL1Y","timestamp":1627531193348},{"file_id":"15NSOdSyJTUpH5idzK_R8uQ8sn5B31EBm","timestamp":1627266393664}],"collapsed_sections":["54Sxy_BRPdXp","rbD0s9KzRex6","9H3y6lfERqpx","cPf-njMfRy-k","Nx7qVvS4T8uP","cysFTtaaa6zj","XqNU-rF9bq9Z"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"54Sxy_BRPdXp"},"source":["#drive"]},{"cell_type":"code","metadata":{"id":"TXUvkNHmKqWL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627546424162,"user_tz":-480,"elapsed":269,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"a6f21f34-f76a-401a-e69a-e1d3d6f6f578"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rbD0s9KzRex6"},"source":["#unzip"]},{"cell_type":"code","metadata":{"id":"dxptKb5aKx6J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627531929019,"user_tz":-480,"elapsed":5812,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"ec663cd2-4b9a-4b1f-ee49-d173454bcfb6"},"source":["!unzip /content/drive/MyDrive/DATASETS_ZIP/for_test/dataset_45v2.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Archive:  /content/drive/MyDrive/DATASETS_ZIP/for_test/dataset_45v2.zip\n","replace M_CarOnly/.DS_Store? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OXhSbsauRNvB","executionInfo":{"status":"ok","timestamp":1627531934305,"user_tz":-480,"elapsed":5291,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"987a7371-2f70-414f-927a-81c0ba572af8"},"source":["!unzip /content/drive/MyDrive/DATASETS_ZIP/for_test/Test2.zip"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Archive:  /content/drive/MyDrive/DATASETS_ZIP/for_test/Test2.zip\n","replace Test2/W_RoadNarrows7.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IlRaDpRuWW_I","executionInfo":{"status":"ok","timestamp":1627546828568,"user_tz":-480,"elapsed":6265,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"e8c48442-1663-434a-b0f7-fcd3ceaad227"},"source":["!unzip /content/drive/MyDrive/暫時性的檔案夾/h5/SVM.zip"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Archive:  /content/drive/MyDrive/暫時性的檔案夾/h5/SVM.zip\n","  inflating: Gray_SVM_linear_Best_Model.sav  \n","  inflating: __MACOSX/._Gray_SVM_linear_Best_Model.sav  \n","  inflating: HSV_SVM_Best_Model.sav  \n","  inflating: __MACOSX/._HSV_SVM_Best_Model.sav  \n","  inflating: RGB_SVM_Best_Model.sav  \n","  inflating: __MACOSX/._RGB_SVM_Best_Model.sav  \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9H3y6lfERqpx"},"source":["#import"]},{"cell_type":"code","metadata":{"id":"usm7qjqExU89"},"source":["import numpy as np                               \n","import pandas as pd                                    \n","import tensorflow as tf\n","import tensorflow.keras\n","import os   \n","import matplotlib\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","from tensorflow.keras import optimizers, Sequential\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau \n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Conv2D, Dense, Flatten, MaxPooling2D, BatchNormalization, Dropout\n","from tensorflow.keras.utils import to_categorical                   \n","from PIL import Image         \n","from sklearn.model_selection import train_test_split, KFold     \n","from sklearn.utils import shuffle \n","from sklearn.preprocessing import LabelEncoder\n","labelencoder = LabelEncoder()\n","from sklearn.metrics import confusion_matrix\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"omLRuETXvLjj"},"source":["#Basic#\n","import numpy as np\n","import pandas as pd\n","\n","#load data#\n","import glob\n","from pandas.core.groupby.groupby import get_groupby\n","import random\n","\n","#preprocessing#\n","import cv2\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.utils import shuffle\n","\n","#ML#\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.decomposition import PCA\n","from sklearn.metrics import accuracy_score\n","\n","#plot#\n","from matplotlib import pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","\n","#save Model#\n","from pandas.core.groupby.groupby import get_groupby\n","import random\n","import joblib"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nLL4P687ik6t"},"source":["def GetRGB_Channel(data):\n","  B, G, R = [], [], []\n","  for i in data: \n","    b, g, r = i[:,:,0], i[:,:,1], i[:,:,2]     \n","    B.append(b)\n","    G.append(g)\n","    R.append(r)\n","  B, G, R = np.array(B), np.array(G), np.array(R)\n","  return R, G, B \n","\n","# R, G, B = GetRGB_Channel(data)\n","\n","\n","def GetRGB(data):\n","  data_rgb = []\n","  for i in range(len(data)): \n","    a = cv2.cvtColor(data[i], cv2.COLOR_BGR2RGB)\n","    data_rgb.append(a)\n","  data_rgb = np.array(data_rgb)\n","  return data_rgb\n","# data_rgb = GetRGB(data)\n","\n","def GetHSV(data):\n","  data_hsv = []\n","  for i in range(len(data)): \n","    a = cv2.cvtColor(data[i], cv2.COLOR_BGR2HSV)\n","    data_hsv.append(a)\n","  data_hsv = np.array(data_hsv)\n","  return data_hsv\n","# data_hsv = GetHSV(data)\n","\n","def GetHSV_Channel(data):\n","  H, S, V = [], [], []\n","  for i in data: \n","    h, s, v = i[:,:,0], i[:,:,1], i[:,:,2]\n","    H.append(h)\n","    S.append(s)\n","    V.append(v)\n","  H, S, V = np.array(H), np.array(S), np.array(V)\n","  return H, S, V\n","# H, S, V = GetHSV_Channel(data)\n","\n","def GetGRAY(data):\n","  data_gray = []\n","  for i in range(len(data)):     \n","    a = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","    data_gray.append(a)\n","  data_gray = np.array(data_gray)\n","  return data_gray\n","# data_gray = GetGRAY(data)\n","\n","def GetEqualizeHist(data):\n","  x = []\n","  for i in range(len(data)): \n","    img = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","    img = cv2.equalizeHist(img)\n","    x.append(img)\n","  EqualizeHist = np.array(x)\n","  return EqualizeHist\n","# EqualizeHist = GetEqualizeHist(data)\n","\n","def GetCanny(data):\n","  x = []\n","  for i in range(len(data)): \n","    blurred = cv2.GaussianBlur(data[i], (3, 3), 0)\n","    blurred = cv2.GaussianBlur(data[i], (3, 3), 0)\n","    canny = cv2.Canny(blurred, 20, 180)\n","    x.append(canny)\n","  Canny = np.array(x)\n","  return Canny\n","# Canny = GetCanny(data)\n","\n","def GetEquCanny(data):\n","  x = []\n","  for i in range(len(data)): \n","    img = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","    img = cv2.equalizeHist(img)\n","    blurred = cv2.GaussianBlur(img, (3, 3), 0)\n","    canny = cv2.Canny(blurred, 20, 180)\n","    x.append(canny)\n","  EquCanny = np.array(x)\n","  return EquCanny\n","# EquCanny = GetEquCanny(data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XdjdkFGgi20L"},"source":["def X_3channel(data):\n","  X = data/ 255.\n","  n = len(data)\n","  X_3channel = X.reshape(n,3072).astype('float32')\n","  return X_3channel\n","\n","def X_1channel(data):\n","  X = data/ 255.\n","  n = len(data)\n","  X_1channel = X.reshape(n,1024).astype('float32')\n","  return X_1channel"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cPf-njMfRy-k"},"source":["#labels"]},{"cell_type":"code","metadata":{"id":"HPH5d4FIgvm0"},"source":["def getClassName(classNo):\n","    if  classNo == 0: return \"M_CarOnly\"\n","    elif classNo == 1: return \"M_DirectionForMotorcycles\"\n","    elif classNo == 2: return \"M_KeepLeft\"\n","    elif classNo == 3: return \"M_KeepRight\"\n","    elif classNo == 4: return \"M_LeftTurn\"\n","    elif classNo == 5: return \"M_RightTurn\"\n","    elif classNo == 6: return \"M_Roundabout\"\n","    elif classNo == 7: return \"M_StraightOnly\"\n","    elif classNo == 8: return \"M_StraightOrLeftTurn\"\n","    elif classNo == 9: return \"M_StraightOrRightTurn\"\n","    elif classNo == 10: return \"Other_Circle\"\n","    elif classNo == 11: return \"Other_Diamond\"\n","    elif classNo == 12: return \"Other_Triangle\"\n","    elif classNo == 13: return \"Other_TriangleV\"\n","    elif classNo == 14: return \"P_NoEntry\"\n","    elif classNo == 15: return \"P_NoLeftTurn\"\n","    elif classNo == 16: return \"P_NoRightAndLeftTurn\"\n","    elif classNo == 17: return \"P_NoRightTurn\"\n","    elif classNo == 18: return \"P_NoStopping\"\n","    elif classNo == 19: return \"P_NoUTurn\"\n","    elif classNo == 20: return \"P_SpecialRightTurn\"\n","    elif classNo == 21: return \"P_SpeedLimit100\"\n","    elif classNo == 22: return \"P_SpeedLimit120\"\n","    elif classNo == 23: return \"P_SpeedLimit20\"\n","    elif classNo == 24: return \"P_SpeedLimit30\"\n","    elif classNo == 25: return \"P_SpeedLimit40\"\n","    elif classNo == 26: return \"P_SpeedLimit50\"\n","    elif classNo == 27: return \"P_SpeedLimit60\"\n","    elif classNo == 28: return \"P_SpeedLimit70\"\n","    elif classNo == 29: return \"P_SpeedLimit80\"\n","    elif classNo == 30: return \"W_Children\"\n","    elif classNo == 31: return \"W_CurveToLeft\"\n","    elif classNo == 32: return \"W_CurveToRight\"\n","    elif classNo == 33: return \"W_DoubleCurve1\"\n","    elif classNo == 34: return \"W_DoubleCurve2\"\n","    elif classNo == 35: return \"W_FallingRocks\"\n","    elif classNo == 36: return \"W_OtherDanger\"\n","    elif classNo == 37: return \"W_Pedestrians\"\n","    elif classNo == 38: return \"W_RoadNarrows\"\n","    elif classNo == 39: return \"W_RoadTrafficLights\"\n","    elif classNo == 40: return \"W_SeparateIsland\"\n","    elif classNo == 41: return \"W_SlipperyRoad\"\n","    elif classNo == 42: return \"W_Slow\"\n","    elif classNo == 43: return \"W_Stop\"\n","    elif classNo == 44: return \"W_UnevenRoad\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R_rNch7igqnM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627531934308,"user_tz":-480,"elapsed":17,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"463322a2-5821-4910-9324-cdb3e66b6461"},"source":["file_name = [\n","        \"M_CarOnly\",\n","        \"M_DirectionForMotorcycles\",\n","        \"M_KeepLeft\",\n","        \"M_KeepRight\",\n","        \"M_LeftTurn\",\n","        \"M_RightTurn\",\n","        \"M_Roundabout\",\n","        \"M_StraightOnly\",\n","        \"M_StraightOrLeftTurn\",\n","        \"M_StraightOrRightTurn\",\n","        \"Other_Circle\",\n","        \"Other_Diamond\",\n","        \"Other_Triangle\",\n","        \"Other_TriangleV\",\n","        \"P_NoEntry\",\n","        \"P_NoLeftTurn\",\n","        \"P_NoRightAndLeftTurn\",\n","        \"P_NoRightTurn\",\n","        \"P_NoStopping\",\n","        \"P_NoUTurn\",\n","        \"P_SpecialRightTurn\",\n","        \"P_SpeedLimit100\",\n","        \"P_SpeedLimit120\",\n","        \"P_SpeedLimit20\",\n","        \"P_SpeedLimit30\",\n","        \"P_SpeedLimit40\",\n","        \"P_SpeedLimit50\",\n","        \"P_SpeedLimit60\",\n","        \"P_SpeedLimit70\",\n","        \"P_SpeedLimit80\",\n","        \"W_Children\",\n","        \"W_CurveToLeft\",\n","        \"W_CurveToRight\",\n","        \"W_DoubleCurve1\",\n","        \"W_DoubleCurve2\",\n","        \"W_FallingRocks\",\n","        \"W_OtherDanger\",\n","        \"W_Pedestrians\",\n","        \"W_RoadNarrows\",\n","        \"W_RoadTrafficLights\",\n","        \"W_SeparateIsland\",\n","        \"W_SlipperyRoad\",\n","        \"W_Slow\",\n","        \"W_Stop\",\n","        \"W_UnevenRoad\"\n","        ]\n","classes = len(file_name)\n","\n","# from sklearn.preprocessing import LabelEncoder\n","# labelencoder = LabelEncoder()\n","\n","file_name_label = labelencoder.fit_transform(file_name)\n","print(file_name_label)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n"," 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Nx7qVvS4T8uP"},"source":["#Traindata"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pi2HWhOARj00","executionInfo":{"status":"ok","timestamp":1627531937002,"user_tz":-480,"elapsed":2707,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"f20a647b-8ec3-44fd-d38a-78f6e661cc76"},"source":["# import numpy as np\n","traindata = []\n","labels = []\n","# import os\n","for i in file_name:\n","  path = os.path.join(os.getcwd(),i,'train')\n","  images = os.listdir(path)\n","# from PIL import Image \n","  for j in images:\n","    # print(path + '/'+ j)\n","    try:\n","      image = Image.open(path + '/'+ j)\n","      image = image.resize((32,32))\n","      image = np.array(image)\n","      traindata.append(image)\n","      labels.append(i)\n","    except:\n","      print(\"Error loading image\")\n","#Converting lists into numpy arrays bcoz its faster and takes lesser memory\n","traindata = np.array(traindata)\n","labels = np.array(labels)\n","print(traindata.shape, labels.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","(4697, 32, 32, 3) (4697,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ydmlTkTGUda5","executionInfo":{"status":"ok","timestamp":1627531937002,"user_tz":-480,"elapsed":18,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"ff51ef00-88b7-4146-d879-2286fe18dc10"},"source":["labels = labelencoder.fit_transform(labels)\n","\n","print(traindata.shape, labels.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(4697, 32, 32, 3) (4697,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"km9-v1MYeIV4","executionInfo":{"status":"ok","timestamp":1627531937003,"user_tz":-480,"elapsed":14,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"3f2bf57e-cfdd-4104-8d1c-1d036906dd8c"},"source":["labels2 = pd.read_excel(\"/content/drive/MyDrive/DATASETS_ZIP/for_test/label_Test2.xlsx\")\n","labels2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file_name</th>\n","      <th>img</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>P_SpeedLimit120</td>\n","      <td>-</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>W_FallingRocks</td>\n","      <td>-</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>W_SeparateIsland</td>\n","      <td>-</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>W_SlipperyRoad</td>\n","      <td>-</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>W_Slow</td>\n","      <td>-</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1278</th>\n","      <td>W_RoadTrafficLights</td>\n","      <td>W_RoadTrafficLights4</td>\n","    </tr>\n","    <tr>\n","      <th>1279</th>\n","      <td>W_RoadTrafficLights</td>\n","      <td>W_RoadTrafficLights5</td>\n","    </tr>\n","    <tr>\n","      <th>1280</th>\n","      <td>W_UnevenRoad</td>\n","      <td>W_UnevenRoad1</td>\n","    </tr>\n","    <tr>\n","      <th>1281</th>\n","      <td>W_UnevenRoad</td>\n","      <td>W_UnevenRoad2</td>\n","    </tr>\n","    <tr>\n","      <th>1282</th>\n","      <td>W_UnevenRoad</td>\n","      <td>W_UnevenRoad3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1283 rows × 2 columns</p>\n","</div>"],"text/plain":["                file_name                   img\n","0         P_SpeedLimit120                     -\n","1          W_FallingRocks                     -\n","2        W_SeparateIsland                     -\n","3          W_SlipperyRoad                     -\n","4                  W_Slow                     -\n","...                   ...                   ...\n","1278  W_RoadTrafficLights  W_RoadTrafficLights4\n","1279  W_RoadTrafficLights  W_RoadTrafficLights5\n","1280         W_UnevenRoad         W_UnevenRoad1\n","1281         W_UnevenRoad         W_UnevenRoad2\n","1282         W_UnevenRoad         W_UnevenRoad3\n","\n","[1283 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"29PHnfYneIV4","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1627531937004,"user_tz":-480,"elapsed":12,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"d65b9dd0-9787-4faa-ae10-6a6dfcf529de"},"source":["labels2.groupby(['file_name'],as_index=False)['file_name'].agg({'cnt':'count'})"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>file_name</th>\n","      <th>cnt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M_CarOnly</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M_DirectionForMotorcycles</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M_KeepLeft</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M_KeepRight</td>\n","      <td>140</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M_LeftTurn</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>M_RightTurn</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>M_Roundabout</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>M_StraightOnly</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>M_StraightOrLeftTurn</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>M_StraightOrRightTurn</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Other_Circle</td>\n","      <td>186</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>Other_Diamond</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Other_Triangle</td>\n","      <td>333</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>Other_TriangleV</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>P_NoEntry</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>P_NoLeftTurn</td>\n","      <td>73</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>P_NoRightAndLeftTurn</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>P_NoRightTurn</td>\n","      <td>37</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>P_NoStopping</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>P_NoUTurn</td>\n","      <td>48</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>P_SpecialRightTurn</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>P_SpeedLimit100</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>P_SpeedLimit120</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>P_SpeedLimit20</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>P_SpeedLimit30</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>P_SpeedLimit40</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>P_SpeedLimit50</td>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>P_SpeedLimit60</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>P_SpeedLimit70</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>P_SpeedLimit80</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>W_Children</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>W_CurveToLeft</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>W_CurveToRight</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>W_DoubleCurve1</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>W_DoubleCurve2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>W_FallingRocks</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>W_OtherDanger</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>W_Pedestrians</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>W_RoadNarrows</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>W_RoadTrafficLights</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>W_SeparateIsland</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>W_SlipperyRoad</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>W_Slow</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>W_Stop</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>W_UnevenRoad</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                    file_name  cnt\n","0                   M_CarOnly    3\n","1   M_DirectionForMotorcycles  100\n","2                  M_KeepLeft   12\n","3                 M_KeepRight  140\n","4                  M_LeftTurn   20\n","5                 M_RightTurn   13\n","6                M_Roundabout    5\n","7              M_StraightOnly   51\n","8        M_StraightOrLeftTurn    7\n","9       M_StraightOrRightTurn    8\n","10               Other_Circle  186\n","11              Other_Diamond   26\n","12             Other_Triangle  333\n","13            Other_TriangleV    1\n","14                  P_NoEntry   19\n","15               P_NoLeftTurn   73\n","16       P_NoRightAndLeftTurn    3\n","17              P_NoRightTurn   37\n","18               P_NoStopping    1\n","19                  P_NoUTurn   48\n","20         P_SpecialRightTurn    1\n","21            P_SpeedLimit100    1\n","22            P_SpeedLimit120    1\n","23             P_SpeedLimit20    3\n","24             P_SpeedLimit30   12\n","25             P_SpeedLimit40   14\n","26             P_SpeedLimit50   42\n","27             P_SpeedLimit60   20\n","28             P_SpeedLimit70    2\n","29             P_SpeedLimit80    3\n","30                 W_Children    9\n","31              W_CurveToLeft   22\n","32             W_CurveToRight   13\n","33             W_DoubleCurve1    5\n","34             W_DoubleCurve2    5\n","35             W_FallingRocks    1\n","36              W_OtherDanger    1\n","37              W_Pedestrians   16\n","38              W_RoadNarrows   14\n","39        W_RoadTrafficLights    5\n","40           W_SeparateIsland    1\n","41             W_SlipperyRoad    1\n","42                     W_Slow    1\n","43                     W_Stop    1\n","44               W_UnevenRoad    3"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"jwKSh38feIV5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627531939131,"user_tz":-480,"elapsed":2138,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"c7248451-f550-4180-e9c4-150d29e09ace"},"source":["traindata2 = []\n","path2 = \"/content/Test2\"\n","pics2 = labels2['img']\n","for i in pics2:\n","  try:\n","    print(i)\n","    image = Image.open(path2 + \"/\" + i + '.jpg')\n","    image = image.resize((32,32))\n","    image = np.array(image)\n","    traindata2.append(image)\n","  except:\n","    print(\"Error loading image\")\n","#Converting lists into numpy arrays bcoz its faster and takes lesser #memory\n","traindata2 = np.array(traindata2)\n","print(traindata2.shape)  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","-\n","Error loading image\n","nan\n","Error loading image\n","cir1\n","cir2\n","cir3\n","cir4\n","cir5\n","cir6\n","cir7\n","cir8\n","cir9\n","cir10\n","cir11\n","cir12\n","cir13\n","cir14\n","cir15\n","cir16\n","cir17\n","cir18\n","cir19\n","cir20\n","cir21\n","cir22\n","cir23\n","cir24\n","cir25\n","cir26\n","cir27\n","cir28\n","cir29\n","cir30\n","cir31\n","cir32\n","cir33\n","cir34\n","cir35\n","cir36\n","cir37\n","cir38\n","cir39\n","cir40\n","cir41\n","cir42\n","cir43\n","cir44\n","cir45\n","cir46\n","cir47\n","cir48\n","cir49\n","cir50\n","cir51\n","cir52\n","cir53\n","cir54\n","cir55\n","cir56\n","cir57\n","cir58\n","cir59\n","cir60\n","cir61\n","cir62\n","cir63\n","cir64\n","cir65\n","cir66\n","cir67\n","cir68\n","cir69\n","cir70\n","cir71\n","cir72\n","cir73\n","cir74\n","cir75\n","cir76\n","cir77\n","cir78\n","cir79\n","cir80\n","cir81\n","cir82\n","cir83\n","cir84\n","cir85\n","cir86\n","cir87\n","cir88\n","cir89\n","cir90\n","cir91\n","cir92\n","cir93\n","cir94\n","cir95\n","cir96\n","cir97\n","cir98\n","cir99\n","cir100\n","cir101\n","cir102\n","cir103\n","cir104\n","cir105\n","cir106\n","cir107\n","cir108\n","cir109\n","cir110\n","cir111\n","cir112\n","cir113\n","cir114\n","cir115\n","cir116\n","cir117\n","cir118\n","cir119\n","cir120\n","cir121\n","cir122\n","cir123\n","cir124\n","cir125\n","cir126\n","cir127\n","cir128\n","cir129\n","cir130\n","cir131\n","cir132\n","cir133\n","cir134\n","cir135\n","cir136\n","cir137\n","cir138\n","cir139\n","cir140\n","cir141\n","cir142\n","cir143\n","cir144\n","cir145\n","cir146\n","cir147\n","cir148\n","cir149\n","cir150\n","cir151\n","cir152\n","cir153\n","cir154\n","cir155\n","cir156\n","cir157\n","cir158\n","cir159\n","cir160\n","cir161\n","cir162\n","cir163\n","cir164\n","tri1\n","tri2\n","tri3\n","tri4\n","tri5\n","tri6\n","tri7\n","tri8\n","tri9\n","tri10\n","tri11\n","tri12\n","tri13\n","tri14\n","tri15\n","tri16\n","tri17\n","tri18\n","tri19\n","tri20\n","tri21\n","tri22\n","tri23\n","tri24\n","tri25\n","tri26\n","tri27\n","tri28\n","tri29\n","tri30\n","tri31\n","tri32\n","tri33\n","tri34\n","tri35\n","tri36\n","tri37\n","tri38\n","tri39\n","tri40\n","tri41\n","tri42\n","tri43\n","tri44\n","tri45\n","tri46\n","tri47\n","tri48\n","tri49\n","tri50\n","tri51\n","tri52\n","tri53\n","tri54\n","tri55\n","tri56\n","tri57\n","tri58\n","tri59\n","tri60\n","tri61\n","tri62\n","tri63\n","tri64\n","tri65\n","tri66\n","tri67\n","tri68\n","tri69\n","tri70\n","tri71\n","tri72\n","tri73\n","tri74\n","tri75\n","tri76\n","tri77\n","tri78\n","tri79\n","tri80\n","tri81\n","tri82\n","tri83\n","tri84\n","tri85\n","tri86\n","tri87\n","tri88\n","tri89\n","tri90\n","tri91\n","tri92\n","tri93\n","tri94\n","tri95\n","tri96\n","tri97\n","tri98\n","tri99\n","tri100\n","tri101\n","tri102\n","tri103\n","tri104\n","tri105\n","tri106\n","tri107\n","tri108\n","tri109\n","tri110\n","tri111\n","tri112\n","tri113\n","tri114\n","tri115\n","tri116\n","tri117\n","tri118\n","tri119\n","tri120\n","tri121\n","tri122\n","tri123\n","tri124\n","tri125\n","tri126\n","tri127\n","tri128\n","tri129\n","tri130\n","tri131\n","tri132\n","tri133\n","tri134\n","tri135\n","tri136\n","tri137\n","tri138\n","tri139\n","tri140\n","tri141\n","tri142\n","tri143\n","tri144\n","tri145\n","tri146\n","tri147\n","tri148\n","tri149\n","tri150\n","tri151\n","tri152\n","tri153\n","tri154\n","tri155\n","tri156\n","tri157\n","tri158\n","tri159\n","tri160\n","tri161\n","tri162\n","tri163\n","tri164\n","tri165\n","tri166\n","tri167\n","tri168\n","tri169\n","tri170\n","tri171\n","tri172\n","tri173\n","tri174\n","tri175\n","tri176\n","tri177\n","tri178\n","tri179\n","tri180\n","tri181\n","tri182\n","tri183\n","tri184\n","tri185\n","tri186\n","tri187\n","tri188\n","tri189\n","tri190\n","tri191\n","tri192\n","tri193\n","tri194\n","tri195\n","tri196\n","tri197\n","tri198\n","tri199\n","tri200\n","tri201\n","tri202\n","tri203\n","tri204\n","tri205\n","tri206\n","tri207\n","tri208\n","tri209\n","tri210\n","tri211\n","tri212\n","tri213\n","tri214\n","tri215\n","tri216\n","tri217\n","tri218\n","tri219\n","tri220\n","tri221\n","tri222\n","tri223\n","tri224\n","tri225\n","tri226\n","tri227\n","tri228\n","tri229\n","tri230\n","tri231\n","tri232\n","tri233\n","tri234\n","tri235\n","tri236\n","tri237\n","tri238\n","tri239\n","tri240\n","tri241\n","tri242\n","tri243\n","tri244\n","tri245\n","tri246\n","tri247\n","tri248\n","tri249\n","tri250\n","tri251\n","tri252\n","tri253\n","tri254\n","tri255\n","tri256\n","tri257\n","tri258\n","tri259\n","tri260\n","tri261\n","tri262\n","tri263\n","tri264\n","tri265\n","tri266\n","tri267\n","tri268\n","tri269\n","tri270\n","M_CarOnly1\n","M_CarOnly2\n","M_CarOnly3\n","M_DirectionForMotorcycles1\n","M_DirectionForMotorcycles2\n","M_DirectionForMotorcycles3\n","M_DirectionForMotorcycles4\n","M_DirectionForMotorcycles5\n","M_DirectionForMotorcycles6\n","M_DirectionForMotorcycles7\n","M_DirectionForMotorcycles8\n","M_DirectionForMotorcycles9\n","M_DirectionForMotorcycles10\n","M_DirectionForMotorcycles11\n","M_DirectionForMotorcycles12\n","M_DirectionForMotorcycles13\n","M_DirectionForMotorcycles14\n","M_DirectionForMotorcycles15\n","M_DirectionForMotorcycles16\n","M_DirectionForMotorcycles17\n","M_DirectionForMotorcycles18\n","M_DirectionForMotorcycles19\n","M_DirectionForMotorcycles20\n","M_DirectionForMotorcycles21\n","M_DirectionForMotorcycles22\n","M_DirectionForMotorcycles23\n","M_DirectionForMotorcycles24\n","M_DirectionForMotorcycles25\n","M_DirectionForMotorcycles26\n","M_DirectionForMotorcycles27\n","M_DirectionForMotorcycles28\n","M_DirectionForMotorcycles29\n","M_DirectionForMotorcycles30\n","M_DirectionForMotorcycles31\n","M_DirectionForMotorcycles32\n","M_DirectionForMotorcycles33\n","M_DirectionForMotorcycles34\n","M_DirectionForMotorcycles35\n","M_DirectionForMotorcycles36\n","M_DirectionForMotorcycles37\n","M_DirectionForMotorcycles38\n","M_DirectionForMotorcycles39\n","M_DirectionForMotorcycles40\n","M_DirectionForMotorcycles41\n","M_DirectionForMotorcycles42\n","M_DirectionForMotorcycles43\n","M_DirectionForMotorcycles44\n","M_DirectionForMotorcycles45\n","M_DirectionForMotorcycles46\n","M_DirectionForMotorcycles47\n","M_DirectionForMotorcycles48\n","M_DirectionForMotorcycles49\n","M_DirectionForMotorcycles50\n","M_DirectionForMotorcycles51\n","M_DirectionForMotorcycles52\n","M_DirectionForMotorcycles53\n","M_DirectionForMotorcycles54\n","M_DirectionForMotorcycles55\n","M_DirectionForMotorcycles56\n","M_DirectionForMotorcycles57\n","M_DirectionForMotorcycles58\n","M_DirectionForMotorcycles59\n","M_DirectionForMotorcycles60\n","M_DirectionForMotorcycles61\n","M_DirectionForMotorcycles62\n","M_DirectionForMotorcycles63\n","M_DirectionForMotorcycles64\n","M_DirectionForMotorcycles65\n","M_DirectionForMotorcycles66\n","M_DirectionForMotorcycles67\n","M_DirectionForMotorcycles68\n","M_DirectionForMotorcycles69\n","M_DirectionForMotorcycles70\n","M_DirectionForMotorcycles71\n","M_DirectionForMotorcycles72\n","M_DirectionForMotorcycles73\n","M_DirectionForMotorcycles74\n","M_DirectionForMotorcycles75\n","M_DirectionForMotorcycles76\n","M_DirectionForMotorcycles77\n","M_DirectionForMotorcycles78\n","M_DirectionForMotorcycles79\n","M_DirectionForMotorcycles80\n","M_DirectionForMotorcycles81\n","M_DirectionForMotorcycles82\n","M_DirectionForMotorcycles83\n","M_DirectionForMotorcycles84\n","M_DirectionForMotorcycles85\n","M_DirectionForMotorcycles86\n","M_DirectionForMotorcycles87\n","M_DirectionForMotorcycles88\n","M_DirectionForMotorcycles89\n","M_DirectionForMotorcycles90\n","M_DirectionForMotorcycles91\n","M_DirectionForMotorcycles92\n","M_DirectionForMotorcycles93\n","M_DirectionForMotorcycles94\n","M_DirectionForMotorcycles95\n","M_DirectionForMotorcycles96\n","M_DirectionForMotorcycles97\n","M_DirectionForMotorcycles98\n","M_DirectionForMotorcycles99\n","M_DirectionForMotorcycles100\n","M_KeepLeft1\n","M_KeepLeft2\n","M_KeepLeft3\n","M_KeepLeft4\n","M_KeepLeft5\n","M_KeepLeft6\n","M_KeepLeft7\n","M_KeepLeft8\n","M_KeepLeft9\n","M_KeepLeft10\n","M_KeepLeft11\n","M_KeepLeft12\n","M_KeepRight1\n","M_KeepRight2\n","M_KeepRight3\n","M_KeepRight4\n","M_KeepRight5\n","M_KeepRight6\n","M_KeepRight7\n","M_KeepRight8\n","M_KeepRight9\n","M_KeepRight10\n","M_KeepRight11\n","M_KeepRight12\n","M_KeepRight13\n","M_KeepRight14\n","M_KeepRight15\n","M_KeepRight16\n","M_KeepRight17\n","M_KeepRight18\n","M_KeepRight19\n","M_KeepRight20\n","M_KeepRight21\n","M_KeepRight22\n","M_KeepRight23\n","M_KeepRight24\n","M_KeepRight25\n","M_KeepRight26\n","M_KeepRight27\n","M_KeepRight28\n","M_KeepRight29\n","M_KeepRight30\n","M_KeepRight31\n","M_KeepRight32\n","M_KeepRight33\n","M_KeepRight34\n","M_KeepRight35\n","M_KeepRight36\n","M_KeepRight37\n","M_KeepRight38\n","M_KeepRight39\n","M_KeepRight40\n","M_KeepRight41\n","M_KeepRight42\n","M_KeepRight43\n","M_KeepRight44\n","M_KeepRight45\n","M_KeepRight46\n","M_KeepRight47\n","M_KeepRight48\n","M_KeepRight49\n","M_KeepRight50\n","M_KeepRight51\n","M_KeepRight52\n","M_KeepRight53\n","M_KeepRight54\n","M_KeepRight55\n","M_KeepRight56\n","M_KeepRight57\n","M_KeepRight58\n","M_KeepRight59\n","M_KeepRight60\n","M_KeepRight61\n","M_KeepRight62\n","M_KeepRight63\n","M_KeepRight64\n","M_KeepRight65\n","M_KeepRight66\n","M_KeepRight67\n","M_KeepRight68\n","M_KeepRight69\n","M_KeepRight70\n","M_KeepRight71\n","M_KeepRight72\n","M_KeepRight73\n","M_KeepRight74\n","M_KeepRight75\n","M_KeepRight76\n","M_KeepRight77\n","M_KeepRight78\n","M_KeepRight79\n","M_KeepRight80\n","M_KeepRight81\n","M_KeepRight82\n","M_KeepRight83\n","M_KeepRight84\n","M_KeepRight85\n","M_KeepRight86\n","M_KeepRight87\n","M_KeepRight88\n","M_KeepRight89\n","M_KeepRight90\n","M_KeepRight91\n","M_KeepRight92\n","M_KeepRight93\n","M_KeepRight94\n","M_KeepRight95\n","M_KeepRight96\n","M_KeepRight97\n","M_KeepRight98\n","M_KeepRight99\n","M_KeepRight100\n","M_KeepRight101\n","M_KeepRight102\n","M_KeepRight103\n","M_KeepRight104\n","M_KeepRight105\n","M_KeepRight106\n","M_KeepRight107\n","M_KeepRight108\n","M_KeepRight109\n","M_KeepRight110\n","M_KeepRight111\n","M_KeepRight112\n","M_KeepRight113\n","M_KeepRight114\n","M_KeepRight115\n","M_KeepRight116\n","M_KeepRight117\n","M_KeepRight118\n","M_KeepRight119\n","M_KeepRight120\n","M_KeepRight121\n","M_KeepRight122\n","M_KeepRight123\n","M_KeepRight124\n","M_KeepRight125\n","M_KeepRight126\n","M_KeepRight127\n","M_KeepRight128\n","M_KeepRight129\n","M_KeepRight130\n","M_KeepRight131\n","M_KeepRight132\n","M_KeepRight133\n","M_KeepRight134\n","M_KeepRight135\n","M_KeepRight136\n","M_KeepRight137\n","M_KeepRight138\n","M_KeepRight139\n","M_KeepRight140\n","M_LeftTurn1\n","M_LeftTurn2\n","M_LeftTurn3\n","M_LeftTurn4\n","M_LeftTurn5\n","M_LeftTurn6\n","M_LeftTurn7\n","M_LeftTurn8\n","M_LeftTurn9\n","M_LeftTurn10\n","M_LeftTurn11\n","M_LeftTurn12\n","M_LeftTurn13\n","M_LeftTurn14\n","M_LeftTurn15\n","M_LeftTurn16\n","M_LeftTurn17\n","M_LeftTurn18\n","M_LeftTurn19\n","M_LeftTurn20\n","M_RightTurn1\n","M_RightTurn2\n","M_RightTurn3\n","M_RightTurn4\n","M_RightTurn5\n","M_RightTurn6\n","M_RightTurn7\n","M_RightTurn8\n","M_RightTurn9\n","M_RightTurn10\n","M_RightTurn11\n","M_RightTurn12\n","M_RightTurn13\n","M_Roundabout1\n","M_Roundabout2\n","M_Roundabout3\n","M_Roundabout4\n","M_Roundabout5\n","M_StraightOnly1\n","M_StraightOnly2\n","M_StraightOnly3\n","M_StraightOnly4\n","M_StraightOnly5\n","M_StraightOnly6\n","M_StraightOnly7\n","M_StraightOnly8\n","M_StraightOnly9\n","M_StraightOnly10\n","M_StraightOnly11\n","M_StraightOnly12\n","M_StraightOnly13\n","M_StraightOnly14\n","M_StraightOnly15\n","M_StraightOnly16\n","M_StraightOnly17\n","M_StraightOnly18\n","M_StraightOnly19\n","M_StraightOnly20\n","M_StraightOnly21\n","M_StraightOnly22\n","M_StraightOnly23\n","M_StraightOnly24\n","M_StraightOnly25\n","M_StraightOnly26\n","M_StraightOnly27\n","M_StraightOnly28\n","M_StraightOnly29\n","M_StraightOnly30\n","M_StraightOnly31\n","M_StraightOnly32\n","M_StraightOnly33\n","M_StraightOnly34\n","M_StraightOnly35\n","M_StraightOnly36\n","M_StraightOnly37\n","M_StraightOnly38\n","M_StraightOnly39\n","M_StraightOnly40\n","M_StraightOnly41\n","M_StraightOnly42\n","M_StraightOnly43\n","M_StraightOnly44\n","M_StraightOnly45\n","M_StraightOnly46\n","M_StraightOnly47\n","M_StraightOnly48\n","M_StraightOnly49\n","M_StraightOnly50\n","M_StraightOnly51\n","M_StraightOrLeftTurn1\n","M_StraightOrLeftTurn2\n","M_StraightOrLeftTurn3\n","M_StraightOrLeftTurn4\n","M_StraightOrLeftTurn5\n","M_StraightOrLeftTurn6\n","M_StraightOrLeftTurn7\n","M_StraightOrRightTurn1\n","M_StraightOrRightTurn2\n","M_StraightOrRightTurn3\n","M_StraightOrRightTurn4\n","M_StraightOrRightTurn5\n","M_StraightOrRightTurn6\n","M_StraightOrRightTurn7\n","M_StraightOrRightTurn8\n","Other_Circle1\n","Other_Circle2\n","Other_Circle3\n","Other_Circle4\n","Other_Circle5\n","Other_Circle6\n","Other_Circle7\n","Other_Circle8\n","Other_Circle9\n","Other_Circle10\n","Other_Circle11\n","Other_Circle12\n","Other_Circle13\n","Other_Circle14\n","Other_Circle15\n","Other_Circle16\n","Other_Circle17\n","Other_Circle18\n","Other_Circle19\n","Other_Circle20\n","Other_Circle21\n","Other_Circle22\n","Other_Diamond1\n","Other_Diamond2\n","Other_Diamond3\n","Other_Diamond4\n","Other_Diamond5\n","Other_Diamond6\n","Other_Diamond7\n","Other_Diamond8\n","Other_Diamond9\n","Other_Diamond10\n","Other_Diamond11\n","Other_Diamond12\n","Other_Diamond13\n","Other_Diamond14\n","Other_Diamond15\n","Other_Diamond16\n","Other_Diamond17\n","Other_Diamond18\n","Other_Diamond19\n","Other_Diamond20\n","Other_Diamond21\n","Other_Diamond22\n","Other_Diamond23\n","Other_Diamond24\n","Other_Diamond25\n","Other_Diamond26\n","Other_Triangle1\n","Other_Triangle2\n","Other_Triangle3\n","Other_Triangle4\n","Other_Triangle5\n","Other_Triangle6\n","Other_Triangle7\n","Other_Triangle8\n","Other_Triangle9\n","Other_Triangle10\n","Other_Triangle11\n","Other_Triangle12\n","Other_Triangle13\n","Other_Triangle14\n","Other_Triangle15\n","Other_Triangle16\n","Other_Triangle17\n","Other_Triangle18\n","Other_Triangle19\n","Other_Triangle20\n","Other_Triangle21\n","Other_Triangle22\n","Other_Triangle23\n","Other_Triangle24\n","Other_Triangle25\n","Other_Triangle26\n","Other_Triangle27\n","Other_Triangle28\n","Other_Triangle29\n","Other_Triangle30\n","Other_Triangle31\n","Other_Triangle32\n","Other_Triangle33\n","Other_Triangle34\n","Other_Triangle35\n","Other_Triangle36\n","Other_Triangle37\n","Other_Triangle38\n","Other_Triangle39\n","Other_Triangle40\n","Other_Triangle41\n","Other_Triangle42\n","Other_Triangle43\n","Other_Triangle44\n","Other_Triangle45\n","Other_Triangle46\n","Other_Triangle47\n","Other_Triangle48\n","Other_Triangle49\n","Other_Triangle50\n","Other_Triangle51\n","Other_Triangle52\n","Other_Triangle53\n","Other_Triangle54\n","Other_Triangle55\n","Other_Triangle56\n","Other_Triangle57\n","Other_Triangle58\n","Other_Triangle59\n","Other_Triangle60\n","Other_Triangle61\n","Other_Triangle62\n","Other_Triangle63\n","P_NoEntry1\n","P_NoEntry2\n","P_NoEntry3\n","P_NoEntry4\n","P_NoEntry5\n","P_NoEntry6\n","P_NoEntry7\n","P_NoEntry8\n","P_NoEntry9\n","P_NoEntry10\n","P_NoEntry11\n","P_NoEntry12\n","P_NoEntry13\n","P_NoEntry14\n","P_NoEntry15\n","P_NoEntry16\n","P_NoEntry17\n","P_NoEntry18\n","P_NoEntry19\n","P_NoLeftTurn1\n","P_NoLeftTurn2\n","P_NoLeftTurn3\n","P_NoLeftTurn4\n","P_NoLeftTurn5\n","P_NoLeftTurn6\n","P_NoLeftTurn7\n","P_NoLeftTurn8\n","P_NoLeftTurn9\n","P_NoLeftTurn10\n","P_NoLeftTurn11\n","P_NoLeftTurn12\n","P_NoLeftTurn13\n","P_NoLeftTurn14\n","P_NoLeftTurn15\n","P_NoLeftTurn16\n","P_NoLeftTurn17\n","P_NoLeftTurn18\n","P_NoLeftTurn19\n","P_NoLeftTurn20\n","P_NoLeftTurn21\n","P_NoLeftTurn22\n","P_NoLeftTurn23\n","P_NoLeftTurn24\n","P_NoLeftTurn25\n","P_NoLeftTurn26\n","P_NoLeftTurn27\n","P_NoLeftTurn28\n","P_NoLeftTurn29\n","P_NoLeftTurn30\n","P_NoLeftTurn31\n","P_NoLeftTurn32\n","P_NoLeftTurn33\n","P_NoLeftTurn34\n","P_NoLeftTurn35\n","P_NoLeftTurn36\n","P_NoLeftTurn37\n","P_NoLeftTurn38\n","P_NoLeftTurn39\n","P_NoLeftTurn40\n","P_NoLeftTurn41\n","P_NoLeftTurn42\n","P_NoLeftTurn43\n","P_NoLeftTurn44\n","P_NoLeftTurn45\n","P_NoLeftTurn46\n","P_NoLeftTurn47\n","P_NoLeftTurn48\n","P_NoLeftTurn49\n","P_NoLeftTurn50\n","P_NoLeftTurn51\n","P_NoLeftTurn52\n","P_NoLeftTurn53\n","P_NoLeftTurn54\n","P_NoLeftTurn55\n","P_NoLeftTurn56\n","P_NoLeftTurn57\n","P_NoLeftTurn58\n","P_NoLeftTurn59\n","P_NoLeftTurn60\n","P_NoLeftTurn61\n","P_NoLeftTurn62\n","P_NoLeftTurn63\n","P_NoLeftTurn64\n","P_NoLeftTurn65\n","P_NoLeftTurn66\n","P_NoLeftTurn67\n","P_NoLeftTurn68\n","P_NoLeftTurn69\n","P_NoLeftTurn70\n","P_NoLeftTurn71\n","P_NoLeftTurn72\n","P_NoLeftTurn73\n","P_NoRightAndLeftTurn1\n","P_NoRightAndLeftTurn2\n","P_NoRightAndLeftTurn3\n","P_NoRightTurn1\n","P_NoRightTurn2\n","P_NoRightTurn3\n","P_NoRightTurn4\n","P_NoRightTurn5\n","P_NoRightTurn6\n","P_NoRightTurn7\n","P_NoRightTurn8\n","P_NoRightTurn9\n","P_NoRightTurn10\n","P_NoRightTurn11\n","P_NoRightTurn12\n","P_NoRightTurn13\n","P_NoRightTurn14\n","P_NoRightTurn15\n","P_NoRightTurn16\n","P_NoRightTurn17\n","P_NoRightTurn18\n","P_NoRightTurn19\n","P_NoRightTurn20\n","P_NoRightTurn21\n","P_NoRightTurn22\n","P_NoRightTurn23\n","P_NoRightTurn24\n","P_NoRightTurn25\n","P_NoRightTurn26\n","P_NoRightTurn27\n","P_NoRightTurn28\n","P_NoRightTurn29\n","P_NoRightTurn30\n","P_NoRightTurn31\n","P_NoRightTurn32\n","P_NoRightTurn33\n","P_NoRightTurn34\n","P_NoRightTurn35\n","P_NoRightTurn36\n","P_NoRightTurn37\n","P_NoUTurn1\n","P_NoUTurn2\n","P_NoUTurn3\n","P_NoUTurn4\n","P_NoUTurn5\n","P_NoUTurn6\n","P_NoUTurn7\n","P_NoUTurn8\n","P_NoUTurn9\n","P_NoUTurn10\n","P_NoUTurn11\n","P_NoUTurn12\n","P_NoUTurn13\n","P_NoUTurn14\n","P_NoUTurn15\n","P_NoUTurn16\n","P_NoUTurn17\n","P_NoUTurn18\n","P_NoUTurn19\n","P_NoUTurn20\n","P_NoUTurn21\n","P_NoUTurn22\n","P_NoUTurn23\n","P_NoUTurn24\n","P_NoUTurn25\n","P_NoUTurn26\n","P_NoUTurn27\n","P_NoUTurn28\n","P_NoUTurn29\n","P_NoUTurn30\n","P_NoUTurn31\n","P_NoUTurn32\n","P_NoUTurn33\n","P_NoUTurn34\n","P_NoUTurn35\n","P_NoUTurn36\n","P_NoUTurn37\n","P_NoUTurn38\n","P_NoUTurn39\n","P_NoUTurn40\n","P_NoUTurn41\n","P_NoUTurn42\n","P_NoUTurn43\n","P_NoUTurn44\n","P_NoUTurn45\n","P_NoUTurn46\n","P_NoUTurn47\n","P_NoUTurn48\n","P_SpeedLimit201\n","P_SpeedLimit202\n","P_SpeedLimit203\n","P_SpeedLimit301\n","P_SpeedLimit302\n","P_SpeedLimit303\n","P_SpeedLimit304\n","P_SpeedLimit305\n","P_SpeedLimit306\n","P_SpeedLimit307\n","P_SpeedLimit308\n","P_SpeedLimit309\n","P_SpeedLimit3010\n","P_SpeedLimit3011\n","P_SpeedLimit3012\n","P_SpeedLimit401\n","P_SpeedLimit402\n","P_SpeedLimit403\n","P_SpeedLimit404\n","P_SpeedLimit405\n","P_SpeedLimit406\n","P_SpeedLimit407\n","P_SpeedLimit408\n","P_SpeedLimit409\n","P_SpeedLimit4010\n","P_SpeedLimit4011\n","P_SpeedLimit4012\n","P_SpeedLimit4013\n","P_SpeedLimit4014\n","P_SpeedLimit501\n","P_SpeedLimit502\n","P_SpeedLimit503\n","P_SpeedLimit504\n","P_SpeedLimit505\n","P_SpeedLimit506\n","P_SpeedLimit507\n","P_SpeedLimit508\n","P_SpeedLimit509\n","P_SpeedLimit5010\n","P_SpeedLimit5011\n","P_SpeedLimit5012\n","P_SpeedLimit5013\n","P_SpeedLimit5014\n","P_SpeedLimit5015\n","P_SpeedLimit5016\n","P_SpeedLimit5017\n","P_SpeedLimit5018\n","P_SpeedLimit5019\n","P_SpeedLimit5020\n","P_SpeedLimit5021\n","P_SpeedLimit5022\n","P_SpeedLimit5023\n","P_SpeedLimit5024\n","P_SpeedLimit5025\n","P_SpeedLimit5026\n","P_SpeedLimit5027\n","P_SpeedLimit5028\n","P_SpeedLimit5029\n","P_SpeedLimit5030\n","P_SpeedLimit5031\n","P_SpeedLimit5032\n","P_SpeedLimit5033\n","P_SpeedLimit5034\n","P_SpeedLimit5035\n","P_SpeedLimit5036\n","P_SpeedLimit5037\n","P_SpeedLimit5038\n","P_SpeedLimit5039\n","P_SpeedLimit5040\n","P_SpeedLimit5041\n","P_SpeedLimit5042\n","P_SpeedLimit601\n","P_SpeedLimit602\n","P_SpeedLimit603\n","P_SpeedLimit604\n","P_SpeedLimit605\n","P_SpeedLimit606\n","P_SpeedLimit607\n","P_SpeedLimit608\n","P_SpeedLimit609\n","P_SpeedLimit6010\n","P_SpeedLimit6011\n","P_SpeedLimit6012\n","P_SpeedLimit6013\n","P_SpeedLimit6014\n","P_SpeedLimit6015\n","P_SpeedLimit6016\n","P_SpeedLimit6017\n","P_SpeedLimit6018\n","P_SpeedLimit6019\n","P_SpeedLimit6020\n","P_SpeedLimit701\n","P_SpeedLimit702\n","P_SpeedLimit801\n","P_SpeedLimit802\n","P_SpeedLimit803\n","P_SpeedLimit1001\n","W_Children1\n","W_Children2\n","W_Children3\n","W_Children4\n","W_Children5\n","W_Children6\n","W_Children7\n","W_Children8\n","W_Children9\n","W_CurveToLeft1\n","W_CurveToLeft2\n","W_CurveToLeft3\n","W_CurveToLeft4\n","W_CurveToLeft5\n","W_CurveToLeft6\n","W_CurveToLeft7\n","W_CurveToLeft8\n","W_CurveToLeft9\n","W_CurveToLeft10\n","W_CurveToLeft11\n","W_CurveToLeft12\n","W_CurveToLeft13\n","W_CurveToLeft14\n","W_CurveToLeft15\n","W_CurveToLeft16\n","W_CurveToLeft17\n","W_CurveToLeft18\n","W_CurveToLeft19\n","W_CurveToLeft20\n","W_CurveToLeft21\n","W_CurveToLeft22\n","W_CurveToRight1\n","W_CurveToRight2\n","W_CurveToRight3\n","W_CurveToRight4\n","W_CurveToRight5\n","W_CurveToRight6\n","W_CurveToRight7\n","W_CurveToRight8\n","W_CurveToRight9\n","W_CurveToRight10\n","W_CurveToRight11\n","W_CurveToRight12\n","W_CurveToRight13\n","W_DoubleCurve11\n","W_DoubleCurve12\n","W_DoubleCurve13\n","W_DoubleCurve14\n","W_DoubleCurve15\n","W_DoubleCurve21\n","W_DoubleCurve22\n","W_DoubleCurve23\n","W_DoubleCurve24\n","W_DoubleCurve25\n","W_OtherDanger1\n","W_Pedestrians1\n","W_Pedestrians2\n","W_Pedestrians3\n","W_Pedestrians4\n","W_Pedestrians5\n","W_Pedestrians6\n","W_Pedestrians7\n","W_Pedestrians8\n","W_Pedestrians9\n","W_Pedestrians10\n","W_Pedestrians11\n","W_Pedestrians12\n","W_Pedestrians13\n","W_Pedestrians14\n","W_Pedestrians15\n","W_Pedestrians16\n","W_RoadNarrows1\n","W_RoadNarrows2\n","W_RoadNarrows3\n","W_RoadNarrows4\n","W_RoadNarrows5\n","W_RoadNarrows6\n","W_RoadNarrows7\n","W_RoadNarrows8\n","W_RoadNarrows9\n","W_RoadNarrows10\n","W_RoadNarrows11\n","W_RoadNarrows12\n","W_RoadNarrows13\n","W_RoadNarrows14\n","W_RoadTrafficLights1\n","W_RoadTrafficLights2\n","W_RoadTrafficLights3\n","W_RoadTrafficLights4\n","W_RoadTrafficLights5\n","W_UnevenRoad1\n","W_UnevenRoad2\n","W_UnevenRoad3\n","(1274, 32, 32, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJ0QVnPmeIV5","executionInfo":{"status":"ok","timestamp":1627531939132,"user_tz":-480,"elapsed":32,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"479ffab3-f3ed-47fe-ae32-95be414e14b3"},"source":["y_test2 = labels2['file_name']\n","print(y_test2.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1283,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RjpbBX-xeIV5","executionInfo":{"status":"ok","timestamp":1627531939132,"user_tz":-480,"elapsed":23,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"bd8d55b7-0b68-45c2-cf0f-62d95b78d28a"},"source":["y_test2 = labelencoder.fit_transform(y_test2)\n","print(traindata2.shape, y_test2.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1274, 32, 32, 3) (1283,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"25-LqZLceIV5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627531939133,"user_tz":-480,"elapsed":19,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"2d187f20-d23c-4806-bb37-c63afdafb3d5"},"source":["d2 = []\n","for i in range(9):\n","  d2.append(i)\n","y_test2 = np.delete(y_test2,d2,0)\n","y_test2.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1274,)"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L7kAY9-iSyVg","executionInfo":{"status":"ok","timestamp":1627531939133,"user_tz":-480,"elapsed":15,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"4a6c8c08-d9cf-4eac-8dbb-43321bc7abe9"},"source":["combine_traindata = np.concatenate((traindata, traindata2), axis=0)\n","combine_traindata.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5971, 32, 32, 3)"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AV6_wf0STg4C","executionInfo":{"status":"ok","timestamp":1627531939134,"user_tz":-480,"elapsed":12,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"0dc067e3-e457-46d0-f97c-5b51b57e0c97"},"source":["combine_labels = np.concatenate((labels, y_test2), axis=0)\n","combine_labels.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5971,)"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"OTuxCA2TZkFf"},"source":["X_train = combine_traindata\n","y_train = combine_labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_AYUHVvRnaSx"},"source":["from sklearn.utils import shuffle   \n","X_train, y_train = shuffle(X_train,y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cysFTtaaa6zj"},"source":["#testdata"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pu5S_IBCUfql","executionInfo":{"status":"ok","timestamp":1627531940598,"user_tz":-480,"elapsed":1060,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"ccc70447-006f-4638-d2fc-7ae59de27481"},"source":["testdata = []\n","test_labels = []\n","for i in file_name:\n","  path = os.path.join(os.getcwd(),i,'test')\n","  images = os.listdir(path)\n","  \n","  for j in images:\n","    try:\n","      image = Image.open(path + '/'+ j)\n","      image = image.resize((32,32))\n","      image = np.array(image)\n","      testdata.append(image)\n","      test_labels.append(i)\n","    except:\n","      print(\"Error loading image\")\n","#Converting lists into numpy arrays bcoz its faster and takes lesser #memory\n","testdata = np.array(testdata)\n","test_labels = np.array(test_labels)\n","print(testdata.shape,test_labels.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","Error loading image\n","(2248, 32, 32, 3) (2248,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"esdDy2P4HTwB","executionInfo":{"status":"ok","timestamp":1627531940599,"user_tz":-480,"elapsed":24,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"73d64f74-6d14-44e4-946e-269de6d39504"},"source":["X_test = testdata\n","y_test = test_labels\n","print(y_test)\n","y_test = labelencoder.fit_transform(y_test)\n","print(y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['M_CarOnly' 'M_CarOnly' 'M_CarOnly' ... 'W_UnevenRoad' 'W_UnevenRoad'\n"," 'W_UnevenRoad']\n","(2248,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CMAIOtuZHuWE"},"source":["X_test, y_test = shuffle(X_test,y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k3TYUr7k5ar8"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KpqHr55EVAF6"},"source":["#create model"]},{"cell_type":"markdown","metadata":{"id":"XZShIiN-KM-E"},"source":["## X,y"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4nfqTmIZs9t0","executionInfo":{"status":"ok","timestamp":1627531940602,"user_tz":-480,"elapsed":23,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"6d4648ac-35da-42df-e319-d939118cbdf2"},"source":["print(X_train.shape, y_train.shape)\n","print(X_test.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(5971, 32, 32, 3) (5971,)\n","(2248, 32, 32, 3) (2248,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eXyX8_M-ctgq","executionInfo":{"status":"ok","timestamp":1627531940603,"user_tz":-480,"elapsed":20,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"8d49a6d1-c7be-45fe-9d8e-32d07fa934d6"},"source":["X_orig = np.concatenate((X_train, X_test), axis=0)\n","y = np.concatenate((y_train, y_test), axis=0)\n","print(X_orig.shape, y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8219, 32, 32, 3) (8219,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cTS1RxiaKM-F","executionInfo":{"status":"ok","timestamp":1627536821137,"user_tz":-480,"elapsed":328,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"d7f21769-ebbf-4cda-bc51-66b7f3a52b14"},"source":["#3channel#\n","#RGB X = GetRGB(X_orig)\n","#HSV X = GetHSV(X_orig)\n","\n","X = GetHSV(X_orig)\n","X = X_3channel(X_orig)\n","\n","print(X.shape, y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8219, 3072) (8219,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NmTqoQA7KM-F","executionInfo":{"status":"ok","timestamp":1627531999982,"user_tz":-480,"elapsed":5,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"619d8188-c415-4914-cf87-3d4ba97777fc"},"source":["#1channel#\n","\n","# #B \n","# X = GetRGB_Channel(X_orig)\n","# X = X[0]\n","# #G \n","# X = GetRGB_Channel(X_orig)\n","# X = X[1]\n","# #R \n","# X = GetRGB_Channel(X_orig)\n","# X = X[2]\n","\n","\n","# #H\n","# X = GetHSV_Channel(X_orig)\n","# X = X[0]\n","# #S\n","# X = GetHSV_Channel(X_orig)\n","# X = X[1]\n","# #V\n","# X = GetHSV_Channel(X_orig)\n","# X = X[2]\n","\n","\n","#Gray X = GetGRAY(X_orig)\n","\n","#EqualizeHistX = GetEqualizeHist(X_orig)\n","\n","#EquCanny X = GetEquCanny(X_orig)\n","\n","X= X_1channel(X)\n","\n","print(X.shape, y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8219, 1024) (8219,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"icKK3q4Pq_Cr"},"source":["# Using k-fold cross validation to assess model performance"]},{"cell_type":"markdown","metadata":{"id":"B4_Jcm0wq_Cr"},"source":["## K-fold cross-validation"]},{"cell_type":"markdown","metadata":{"id":"0b5Kyl1LlrjS"},"source":["**LogisticRegression**"]},{"cell_type":"code","metadata":{"id":"s23t9gZIlE_f"},"source":["import numpy as np\n","from sklearn.model_selection import StratifiedKFold, GridSearchCV # KFold()考慮類別的分層,用於分類問題 \n","from sklearn.preprocessing import StandardScaler\n","#from sklearn.decomposition import PCA\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.pipeline import make_pipeline\n","from sklearn.model_selection import cross_val_score\n","from sklearn.svm import SVC"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wUiGYCi6q_Cs"},"source":["pipe_lr = make_pipeline(#StandardScaler(),\n","                        # PCA(n_components=2),\n","                        LogisticRegression(random_state=1))\n"," \n","# pipe_lr.fit(X_train, y_train)\n","# y_pred = pipe_lr.predict(X_test)\n","# print('Test Accuracy: %.3f' % pipe_lr.score(X_test, y_test))\n","\n","\n","kfold = StratifiedKFold(n_splits=10,\n","             random_state=1,\n","             shuffle=True).split(X, y) #kfold: index\n","\n","scores = []\n","for k, (train, test) in enumerate(kfold): # training data Index & testing data Index of the k-th fold\n","    pipe_lr.fit(X[train], y[train])\n","    score = pipe_lr.score(X[test], y[test])\n","    scores.append(score)\n","    print('Fold: %2d, Class dist.: %s, Acc: %.3f' % (k+1,\n","          np.bincount(y[train]), score))\n","    \n","print('\\nCV accuracy: %.3f +/- %.3f' % (np.mean(scores), np.std(scores)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2iKWWNrqeA0Q","executionInfo":{"status":"ok","timestamp":1627266910688,"user_tz":-480,"elapsed":14,"user":{"displayName":"Janet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi4rkGcA2E4unuD1qDAFRN72btJf6CBMvHXQe_r=s64","userId":"10582750173596953613"}},"outputId":"4325a72c-9de0-4c44-9e17-2bdf33041c92"},"source":["filename = 'HSV_Logist_Model.sav'\n","joblib.dump(pipe_lr, filename)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['HSV_Logist_Model.sav']"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"186FZ_LNl0iR"},"source":["SVM"]},{"cell_type":"code","metadata":{"id":"ARVoEbawEbUk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627279099128,"user_tz":-480,"elapsed":12188443,"user":{"displayName":"Janet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi4rkGcA2E4unuD1qDAFRN72btJf6CBMvHXQe_r=s64","userId":"10582750173596953613"}},"outputId":"784bc6c8-a0d8-4e57-a7ec-e1fd1b904cc0"},"source":["pipe_svc = make_pipeline(#StandardScaler(),\n","              SVC(random_state=1))\n","\n","# param_range = [0.01, 0.1, 1.0, 10]\n","\n","param_grid = [{'svc__C': [0.1], \n","        'svc__gamma': [0.01], \n","        'svc__kernel': ['linear']}]\n","\n","kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n","\n","gs = GridSearchCV(estimator=pipe_svc, \n","          param_grid=param_grid, \n","          scoring='accuracy', \n","          cv=kfold,\n","          n_jobs=-1)\n","\n","gs = gs.fit(X, y) #train data only \n","print(gs.best_score_) \n","print(gs.best_params_) # Using training & validation data!! Test data is not used in gridsearch.\n","# val accuracy is for ->hyperparameters\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.8851436293642256\n","{'svc__C': 0.1, 'svc__gamma': 0.01, 'svc__kernel': 'linear'}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ujZFSqQJmUE1","executionInfo":{"status":"ok","timestamp":1627282561577,"user_tz":-480,"elapsed":433,"user":{"displayName":"Janet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi4rkGcA2E4unuD1qDAFRN72btJf6CBMvHXQe_r=s64","userId":"10582750173596953613"}},"outputId":"f79d2401-c7f5-49af-95df-43b4622bcda9"},"source":["print('\\nCV accuracy: %.3f +/- %.3f' % (np.mean(scores), np.std(scores)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","CV accuracy: 0.867 +/- 0.011\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fNf8QqLdgdyj","executionInfo":{"status":"ok","timestamp":1627281486826,"user_tz":-480,"elapsed":377435,"user":{"displayName":"Janet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi4rkGcA2E4unuD1qDAFRN72btJf6CBMvHXQe_r=s64","userId":"10582750173596953613"}},"outputId":"5cf772d8-c42d-455b-af18-b2db6ef3c27f"},"source":["gsb = gs.best_estimator_ # 9 folds for training, 1 fold for validation\n","gsb.fit(X, y) #why?? use all 10 folds for training\n","print('Test accuracy: %.3f' % gsb.score(X, y))\n","\n","filename = 'HSV_SVM_Best_Model.sav'\n","joblib.dump(gsb, filename)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test accuracy: 0.997\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["['RGB_SVM_Best_Model.sav']"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BGfKmtD1m-ZD","executionInfo":{"status":"ok","timestamp":1627282729956,"user_tz":-480,"elapsed":419,"user":{"displayName":"Janet","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi4rkGcA2E4unuD1qDAFRN72btJf6CBMvHXQe_r=s64","userId":"10582750173596953613"}},"outputId":"06defbeb-4982-46aa-d510-496c61cd0b59"},"source":["filename = 'HSV_SVM_Best_Model.sav'\n","joblib.dump(gsb, filename)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['HSV_SVM_Best_Model.sav']"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"BxANXaddq_Cw"},"source":["Random Forest"]},{"cell_type":"code","metadata":{"id":"GLLhMionq_Cw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627537715369,"user_tz":-480,"elapsed":865923,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"460c413e-0974-48b3-bfe4-a7d7286da6d0"},"source":["# RandomForest\n","from sklearn.ensemble import RandomForestClassifier\n","\n","kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n","\n","param_grid = [{'n_estimators': [100,300,500],'max_samples': [100,300,500]}]\n","\n","rf = GridSearchCV(estimator=RandomForestClassifier(\n","                  criterion='gini',\n","                  random_state=1,),\n","                  param_grid= param_grid ,\n","                  scoring='accuracy',\n","                  cv=kfold)      \n","\n","RF = rf.fit(X, y)\n","print(RF.best_score_) \n","print(RF.best_params_) \n","# print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores), np.std(scores)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.8297860896005405\n","{'max_samples': 500, 'n_estimators': 500}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QrAZgoRKaxXl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627538147547,"user_tz":-480,"elapsed":432191,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"e9ef727f-cc1b-4a5d-a673-b45422b88270"},"source":["pipe_lr = make_pipeline(#StandardScaler(),\n","                        # PCA(n_components=2),\n","                        RandomForestClassifier(random_state=1))\n"," \n","# pipe_lr.fit(X_train, y_train)\n","# y_pred = pipe_lr.predict(X_test)\n","# print('Test Accuracy: %.3f' % pipe_lr.score(X_test, y_test))\n","\n","\n","kfold = StratifiedKFold(n_splits=10,\n","             random_state=1,\n","             shuffle=True).split(X, y) #kfold: index\n","\n","scores = []\n","for k, (train, test) in enumerate(kfold): # training data Index & testing data Index of the k-th fold\n","    pipe_lr.fit(X[train], y[train])\n","    score = pipe_lr.score(X[test], y[test])\n","    scores.append(score)\n","    print('Fold: %2d, Class dist.: %s, Acc: %.3f' % (k+1,\n","          np.bincount(y[train]), score))\n","    \n","print('\\nCV accuracy: %.3f +/- %.3f' % (np.mean(scores), np.std(scores)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fold:  1, Class dist.: [138 223 146 266 153 146 139 196 142 143 313 170 455 175 162 200 119 183\n"," 138 182 143 140 141 139 148 145 177 153 151 139 143 153 152 139 139 135\n"," 142 150 152 142 135 137 134 130 149], Acc: 0.925\n","Fold:  2, Class dist.: [138 223 146 266 153 146 139 196 141 144 314 171 454 175 162 201 119 183\n"," 138 182 143 140 141 139 148 145 177 153 150 139 143 153 151 139 138 135\n"," 143 149 152 142 136 137 134 130 149], Acc: 0.898\n","Fold:  3, Class dist.: [138 223 146 266 153 147 139 197 141 143 314 170 454 175 162 201 119 184\n"," 138 182 143 139 140 139 148 146 178 153 150 139 144 153 151 138 138 135\n"," 143 149 152 142 136 136 133 130 150], Acc: 0.909\n","Fold:  4, Class dist.: [138 223 146 266 153 147 140 197 141 143 313 170 454 175 162 201 120 184\n"," 138 182 143 139 140 140 148 146 178 153 150 139 143 153 151 138 138 135\n"," 142 149 152 141 136 136 133 131 150], Acc: 0.925\n","Fold:  5, Class dist.: [139 224 146 266 153 147 140 196 141 143 313 170 454 174 162 201 120 184\n"," 138 182 143 139 140 140 147 146 178 153 150 139 143 153 151 138 138 135\n"," 142 149 152 141 136 137 133 131 150], Acc: 0.934\n","Fold:  6, Class dist.: [139 224 146 266 153 147 140 196 141 143 313 170 454 174 162 201 120 184\n"," 138 182 143 139 140 140 147 146 177 153 150 139 143 153 151 138 139 135\n"," 142 149 152 141 136 137 133 131 150], Acc: 0.920\n","Fold:  7, Class dist.: [139 223 145 267 153 147 140 196 141 143 313 170 455 174 162 201 120 184\n"," 138 182 144 139 140 140 147 146 177 153 150 138 143 153 151 139 139 135\n"," 142 149 152 141 136 137 133 131 149], Acc: 0.915\n","Fold:  8, Class dist.: [139 223 145 267 153 147 140 196 141 143 313 170 455 174 162 201 120 184\n"," 137 182 143 140 140 140 147 146 177 153 150 138 143 153 151 139 139 135\n"," 142 150 152 141 136 137 133 131 149], Acc: 0.906\n","Fold:  9, Class dist.: [139 223 146 267 153 147 139 196 142 143 313 170 455 175 162 200 120 183\n"," 137 181 143 140 141 139 148 146 177 153 151 138 143 153 151 139 139 135\n"," 142 150 152 141 136 137 133 130 149], Acc: 0.933\n","Fold: 10, Class dist.: [139 223 146 267 153 146 139 196 142 143 313 170 455 175 162 200 120 183\n"," 137 181 143 140 141 139 148 146 177 153 151 138 143 153 152 139 139 135\n"," 142 150 153 141 136 137 133 130 149], Acc: 0.921\n","\n","CV accuracy: 0.918 +/- 0.011\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x2kjjQ9z9g8Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627538147548,"user_tz":-480,"elapsed":12,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"8ee504c8-244f-4ef8-a816-3844d2bac47a"},"source":["print(rf.best_score_) \n","print(rf.best_params_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.8297860896005405\n","{'max_samples': 500, 'n_estimators': 500}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FoIahwDTn8WX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627538148156,"user_tz":-480,"elapsed":612,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"83a38a68-566c-4bee-fe21-fbeaa6689a04"},"source":["rfb = rf.best_estimator_ # 9 folds for training, 1 fold for validation\n","# print('Test accuracy: %.3f' % rfb.score(X_test, y_test))\n","\n","filename = 'HSV_RandomForest_Model.sav'\n","joblib.dump(rfb, filename)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['HSV_RandomForest_Model.sav']"]},"metadata":{"tags":[]},"execution_count":92}]},{"cell_type":"markdown","metadata":{"id":"O5gWKDHs3OmD"},"source":["#速度與激情"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":403},"id":"VUyxy3zd3LJe","executionInfo":{"status":"error","timestamp":1627546937394,"user_tz":-480,"elapsed":3036,"user":{"displayName":"10羅英期","photoUrl":"","userId":"16605281828692221105"}},"outputId":"7ba1ab1d-dc1d-4d81-dcf7-8add1fca357a"},"source":["#!/usr/bin/env python3\n","# -*- coding: utf-8 -*-\n","\"\"\"\n","Created on Tue Jul 27 10:04:17 2021\n","\n","@author: janet\n","\"\"\"\n","\n","# -*- coding: utf-8 -*-\n","\"\"\"\n","Created on Sat Jul 24 12:43:27 2021\n","\n","@author: user\n","\"\"\"\n","\n","\"\"\"\n","File name: 演算法對接範例程式_v01.py\n","Date: 2021/07/19\n","Version: v01\n","Usage: 演算法對接主程式\n","\"\"\"\n","\n","\n","#region import package\n","import os\n","import numpy as np\n","\n","# def load_image_files\n","import cv2\n","import glob\n","\n","import joblib\n","\n","# def loadModel\n","from tensorflow.keras.models import load_model\n","\n","# predict\n","from tensorflow.keras.models import Model\n","\n","#endregion\n","import tensorflow as tf\n","\n","#plot\n","from matplotlib import pyplot as plt\n","# from sklearn.linear_model import LogisticRegression\n","# from sklearn.svm import SVC\n","\n","class AI_Algo():\n","    \"\"\"\n","    A class used to ...\n","\n","    ...\n","\n","    Attributes\n","    ----------\n","    data : ndarray (n, w, h, 3)\n","        the input image of training model\n","    targets : ndarray (n, label)\n","        the target label of training model\n","    model : \n","        Trained model\n","\n","    Methods\n","    -------\n","    __init__(...)\n","        Class initialization\n","    fit(X, y)\n","        Train model\n","    saveModel(path):\n","        Save model\n","    loadModel(path):\n","        Load model\n","    predict(X):\n","        Predict model\n","    \"\"\"\n","\n","    classLabel= {\n","                \"0\":{\"name\":\"CarOnly\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"1\":{\"name\":\"DirectForMotor\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"2\":{\"name\":\"KeepLeft\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"3\":{\"name\":\"KeepRight\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"4\":{\"name\":\"LeftTurn\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"5\":{\"name\":\"RightTurn\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"6\":{\"name\":\"Roundabout\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"7\":{\"name\":\"StraightOnly\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"8\":{\"name\":\"StraightOrLeft\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"9\":{\"name\":\"StraightOrRight\",\"info\":\"FollowSign\",\"color\":\"blue\"},\n","                \"10\":{\"name\":\"Other_SignC\",\"info\":\"Look UP\",\"color\":\"green\"},\n","                \"11\":{\"name\":\"Other_SignD\",\"info\":\"Look UP\",\"color\":\"green\"},\n","                \"12\":{\"name\":\"Other_SignT\",\"info\":\"Look UP\",\"color\":\"green\"},\n","                \"13\":{\"name\":\"Other_SignT2\",\"info\":\"Look UP\",\"color\":\"green\"},\n","                \"14\":{\"name\":\"NoEntry\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"15\":{\"name\":\"NoLeftTurn\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"16\":{\"name\":\"NoRandLTurn\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"17\":{\"name\":\"NoRightTurn\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"18\":{\"name\":\"NoStopping\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"19\":{\"name\":\"NoUTurn\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"20\":{\"name\":\"ALTRightTurn\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"21\":{\"name\":\"SpdLimit100\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"22\":{\"name\":\"SpdLimit120\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"23\":{\"name\":\"SpdLimit20\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"24\":{\"name\":\"SpdLimit30\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"25\":{\"name\":\"SpdLimit40\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"26\":{\"name\":\"SpdLimit50\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"27\":{\"name\":\"SpdLimit60\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"28\":{\"name\":\"Spdimit70\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"29\":{\"name\":\"Spdimit80\",\"info\":\"Be Aware\",\"color\":\"red\"},\n","                \"30\":{\"name\":\"Children\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"31\":{\"name\":\"CurveToLeft\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"32\":{\"name\":\"CurveToRight\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"33\":{\"name\":\"DoubleCurve1\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"34\":{\"name\":\"DoubleCurve2\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"35\":{\"name\":\"FallingRocks\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"36\":{\"name\":\"OtherDanger\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"37\":{\"name\":\"Pedestrians\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"38\":{\"name\":\"RoadNarrows\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"39\":{\"name\":\"RoadLights\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"40\":{\"name\":\"SeparateIsland\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"41\":{\"name\":\"SlipperyRoad\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"42\":{\"name\":\"Slow\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"43\":{\"name\":\"Stop\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                \"44\":{\"name\":\"UnevenRoad\",\"info\":\"Caution\",\"color\":\"orange\"},\n","                }\n","    \n","    preXclassLabel= {\n","               \"0\":{\"name\":\"Blue Channel\", \"Model_path\":\"B_Logist_Model.sav\"},\n","               \"1\":{\"name\":\"Green Channel\", \"Model_path\":\"G_Logist_Model.sav\"},\n","               \"2\":{\"name\":\"Red Channel\", \"Model_path\":\"R_Logist_Model.sav\"},\n","               \"3\":{\"name\":\"RGB\", \"Model_path\":\"RGB_Logist_Model.sav\"},\n","               \"4\":{\"name\":\"Hue Channel\",\"Model_path\":\"H_Logist_Model.sav\"},\n","               \"5\":{\"name\":\"Saturation Channel\",\"Model_path\":\"S_Logist_Model.sav\"},\n","               \"6\":{\"name\":\"Value channel\",\"Model_path\":\"V_Logist_Model.sav\"},\n","               \"7\":{\"name\":\"HSV\",\"Model_path\":\"HSV_Logist_Model.sav\"},\n","               \"8\":{\"name\":\"Grayscale\", \"Model_path\":\"Gray_Logist_Model.sav\"},\n","               \"9\":{\"name\":\"Do EqualizeHist\",\"Model_path\":\"EqualizeHist_Logist_Model.sav\"},\n","               \"10\":{\"name\":\"Do Canny\",\"Model_path\":\"Canny_Logist_Model.sav\"},\n","               \"11\":{\"name\":\"Do EqualizeHist & Canny\",\"Model_path\":\"GetEquCanny_Logist_Model.sav\"}\n","               }\n","\n","    class preX(): \n","        \n","           \n","        def __init__(self):\n","        \n","            \n","            print('__init__')\n","            pass\n","        \n","        \n","        def GetRGB_Channel(data):\n","          B, G, R = [], [], []\n","          if data.ndim==3:\n","            b, g, r = data[:,:,0], data[:,:,1], data[:,:,2]     \n","            B, G, R = np.array(b), np.array(g), np.array(r)\n","          elif data.ndim==4:\n","            for i in data: \n","              b, g, r = i[:,:,0], i[:,:,1], i[:,:,2]     \n","              B.append(b)\n","              G.append(g)\n","              R.append(r)\n","            B, G, R = np.array(B), np.array(G), np.array(R)\n","          return R, G, B \n","        \n","        \n","        def GetRGB(data):\n","          data_rgb = []\n","          if data.ndim==3:\n","            a = cv2.cvtColor(data, cv2.COLOR_BGR2RGB)\n","            data_rgb = np.array(a)\n","              \n","          elif data.ndim==4:\n","            for i in range(len(data)): \n","              a = cv2.cvtColor(data[i], cv2.COLOR_BGR2RGB)\n","              data_rgb.append(a)\n","            data_rgb = np.array(data_rgb)\n","          return data_rgb\n","        \n","        \n","        def GetHSV(data):\n","          data_hsv = []\n","          if data.ndim==3:\n","            a = cv2.cvtColor(data, cv2.COLOR_BGR2HSV)\n","            data_hsv = np.array(a)\n","        \n","          elif data.ndim==4: \n","            for i in range(len(data)): \n","              a = cv2.cvtColor(data[i], cv2.COLOR_BGR2HSV)\n","              data_hsv.append(a)\n","            data_hsv = np.array(data_hsv)\n","          return data_hsv\n","        \n","        \n","        def GetHSV_Channel(data):\n","          H, S, V = [], [], []\n","          if data.ndim==3:\n","              h, s, v = data[:,:,0], data[:,:,1], data[:,:,2]\n","              H, S, V = np.array(h), np.array(s), np.array(v)\n","          \n","          elif data.ndim==4:\n","            for i in data: \n","              h, s, v = i[:,:,0], i[:,:,1], i[:,:,2]\n","              H.append(h)\n","              S.append(s)\n","              V.append(v)\n","            H, S, V = np.array(H), np.array(S), np.array(V)\n","          return H, S, V\n","        \n","        \n","        def GetGRAY(data):\n","          data_gray = []\n","          if data.ndim==3:\n","            a = cv2.cvtColor(data, cv2.COLOR_BGR2GRAY)\n","            data_gray = np.array(a)\n","        \n","          elif data.ndim==4:\n","            for i in range(len(data)):     \n","              a = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","              data_gray.append(a)\n","            data_gray = np.array(data_gray)\n","          return data_gray\n","        \n","        \n","        def GetEqualizeHist(data):\n","          x = []\n","          if data.ndim==3:\n","            img = cv2.cvtColor(data, cv2.COLOR_BGR2GRAY)\n","            img = cv2.equalizeHist(img)\n","            EqualizeHist = np.array(img)\n","        \n","          elif data.ndim==4:\n","            for i in range(len(data)): \n","              img = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","              img = cv2.equalizeHist(img)\n","              x.append(img)\n","            EqualizeHist = np.array(x)\n","          return EqualizeHist\n","        \n","        \n","        def GetCanny(data):\n","          x = []\n","          if data.ndim==3:\n","            blurred = cv2.GaussianBlur(data, (3, 3), 0)\n","            canny = cv2.Canny(blurred, 20, 180)\n","            Canny = np.array(canny)\n","        \n","          elif data.ndim==4:\n","            for i in range(len(data)): \n","              blurred = cv2.GaussianBlur(data[i], (3, 3), 0)\n","              canny = cv2.Canny(blurred, 20, 180)\n","              x.append(canny)\n","            Canny = np.array(x)\n","          return Canny\n","        \n","        \n","        def GetEquCanny(data):\n","          x = []\n","          if data.ndim==3:\n","            img = cv2.cvtColor(data, cv2.COLOR_BGR2GRAY)\n","            img = cv2.equalizeHist(img)\n","            blurred = cv2.GaussianBlur(img, (3, 3), 0)\n","            canny = cv2.Canny(blurred, 20, 180)\n","            EquCanny = np.array(canny)\n","        \n","          elif data.ndim==4:\n","            for i in range(len(data)): \n","              img = cv2.cvtColor(data[i], cv2.COLOR_BGR2GRAY)\n","              img = cv2.equalizeHist(img)\n","              blurred = cv2.GaussianBlur(img, (3, 3), 0)\n","              canny = cv2.Canny(blurred, 20, 180)\n","              x.append(canny)\n","            EquCanny = np.array(x)\n","          return EquCanny\n","        \n","    \n","        def X_3channel(data):\n","            if data.ndim==3:\n","                X = data/ 255.\n","                n = len(data)\n","                X_3channel = X.reshape(1,3072).astype('float32')\n","            elif data.ndim==4:\n","                X = data/ 255.\n","                n = len(data)\n","                X_3channel = X.reshape(n,3072).astype('float32')\n","            return X_3channel\n","    \n","    \n","        def X_1channel(data):\n","            if data.ndim==3:\n","                X = data/ 255.\n","                n = len(data)\n","                X_1channel = X.reshape(n,1024).astype('float32')\n","            elif data.ndim==4:\n","                X = data/ 255.\n","                n = len(data)\n","                X_1channel = X.reshape(n,1024).astype('float32')\n","            return X_1channel\n","\n","    def __init__(self): # 參數\n","        \"\"\"\n","        Constructor: Class initialization\n","        \"\"\"\n","        \n","        print('__init__')\n","        pass\n","\n","\n","    def loadModel(self, model_path):\n","        \"\"\"\n","        Load model\n","        '''\n","        Parameters\n","        ----------\n","        path : string\n","            Loading model path\n","        \"\"\"\n","\n","        self.model = joblib.load(model_path)\n","        \n","        \n","        model_name = os.path.basename(model_path)\n","        \n","\n","        \n","        # self.model = preXclassLabel[i][\"Model_path\"]\n","        return model_name\n","    \n","     \n","    def predict(self, model_name ,X_test):\n","        \n","        # Preprocessing X_test\n","\n","        preXclassLabel = model_name\n","        \n","        if preXclassLabel == \"B_Logist_Model.sav\":\n","            preXclassLabel = '0'\n","\n","        elif preXclassLabel == \"G_Logist_Model\":\n","            preXclassLabel = '1'\n","        elif preXclassLabel == \"R_Logist_Model.sav\":\n","            preXclassLabel = '2'            \n","        elif preXclassLabel == \"RGB_Logist_Model.sav\":\n","            preXclassLabel = '3'            \n","        elif preXclassLabel == \"H_Logist_Model.sav\":\n","            preXclassLabel = '4'\n","        elif preXclassLabel == \"S_Logist_Model.sav\":\n","            preXclassLabel = '5'\n","        elif preXclassLabel == \"V_Logist_Model.sav\":\n","            preXclassLabel = '6'\n","        elif preXclassLabel == \"HSV_Logist_Model.sav\":\n","            preXclassLabel = '7'\n","        elif preXclassLabel == \"Gray_Logist_Model.sav\":\n","            preXclassLabel = '8'\n","        elif preXclassLabel == \"EqualizeHist_Logist_Model.sav\":\n","            preXclassLabel = '9'\n","        elif preXclassLabel == \"Canny_Logist_Model.sav\":\n","            preXclassLabel = '10'\n","        elif preXclassLabel == \"GetEquCanny_Logist_Model.sav\":\n","            preXclassLabel = '11'\n","       \n","        if preXclassLabel == \"0\":\n","            r, g, b= self.preX.GetRGB_Channel(X_test)\n","            X = b\n","            \n","        elif preXclassLabel == \"1\":\n","            r, g, b= self.preX.GetRGB_Channel(X_test)\n","            X = g\n","        \n","        elif preXclassLabel == \"2\":\n","            r, g, b= self.preX.GetRGB_Channel(X_test)\n","            X = r\n","            \n","        elif preXclassLabel == \"3\": \n","            X = self.preX.GetRGB(X_test)\n","            \n","        elif preXclassLabel == \"4\":\n","            h, s, v = self.preX.GetHSV_Channel(X_test)\n","            X = h\n","            \n","        elif preXclassLabel == \"5\":\n","            h, s, v = self.preX.GetHSV_Channel(X_test)\n","            X = s\n","            \n","        elif preXclassLabel == \"6\":\n","            h, s, v = self.preX.GetHSV_Channel(X_test)\n","            X = v\n","            \n","        elif preXclassLabel == \"7\":\n","            X = self.preX.GetHSV(X_test)\n","            \n","        elif preXclassLabel == \"8\":\n","            X = self.preX.GetGRAY(X_test)\n","            \n","        elif preXclassLabel == \"9\":\n","            X = self.preX.GetEqualizeHist(X_test)\n","            \n","        elif preXclassLabel == \"10\":\n","            X = self.preX.GetCanny(X_test)\n","            \n","        elif preXclassLabel == \"11\":\n","            X = self.preX.GetEquCanny(X_test)\n","        \n","        else:\n","            X = X_test\n","        \n","\n","        # resized\n","        dimension = (32,32)\n","        raw_data_test = []\n","        if X.ndim==3:\n","            resized = cv2.resize(X, dimension, interpolation = cv2.INTER_AREA)\n","        \n","        elif X.ndim==4:\n","            for i in range(len(X)):\n","                resized = cv2.resize(Ｘ[i], dimension, interpolation = cv2.INTER_AREA)\n","                raw_data_test.append(resized)   \n","\n","        \n","\n","        \n","        # Flatten\n","        channel = X.shape\n","        if len(channel)==4 and channel[-1]==3:\n","            X_test = self.preX.X_3channel(X)\n","        \n","        elif len(channel)==3:\n","            X_test = self.preX.X_1channel(X)\n","            \n","        # Model\n","        \n","        model = self.model\n","        probability = model.predict_proba(X_test)\n","        y_pred_probability = list(probability)\n","        \n","        yy_pred = model.predict(X_test)\n","        predictresult = list(yy_pred)\n","        \n","        # 最終輸出格式: [('M_CarOnly', 0.35248378, 'M', \"red\")]\n","        output = []\n","        for i in range(len(yy_pred)):\n","          int_dict = str(predictresult[i])\n","          name_dict = self.classLabel[int_dict]['name']\n","          shorthand = self.classLabel[int_dict]['info']\n","          color = self.classLabel[int_dict]['color']\n","          x = y_pred_probability[i]\n","\n","\n","          prob = x.max()\n","\n","          # prob = y_pred_probability[i].index(np.max(y_pred_probability[i]))\n","    \n","    \n","          output.append(tuple([name_dict, prob, shorthand, color]))\n","        return output\n","    \n","    \n","  \n","    \n","    def load_image_files(self, container_path, dimension=(32, 32)):\n","        \"\"\"\n","        Load image files with categories as subfolder names \n","        which performs like scikit-learn sample dataset\n","        Parameters\n","        ----------\n","        container_path : string or unicode\n","            Path to the main folder holding one subfolder per category\n","        dimension : tuple\n","            size to which image are adjusted to\n","        Returns\n","        -------\n","        Bunch\n","        \"\"\"\n","\n","        raw_data_test = []\n","        test_len = []\n","        size = dimension\n","        \n","        \n","        # link = container_path + \"*.jpg\"\n","        link = os.path.join(container_path, '*.jpg')\n","        path = glob.glob(link)\n","\n","        \n","        pre_size = len(raw_data_test)\n","        #print(pre_size)\n","\n","        \n","        for img in path:\n","          #n = cv2.imread(img)\n","          n = cv2.imdecode(np.fromfile(img, dtype=np.uint8), 1) # Jeff Revised!\n","          n = cv2.cvtColor(n, cv2.COLOR_BGR2RGB)\n","          resized = cv2.resize(n, size, interpolation = cv2.INTER_AREA)\n","          raw_data_test.append(resized)\n","        \n","        real_size = len(raw_data_test) - pre_size\n","        \n","        test_len.append(real_size)\n","        \n","        test_len = np.array(raw_data_test)\n","\n","        return test_len\n","\n","    #region Other functions\n","\n","    #endregion\n","    \n","\n","import time\n","\n","\n","\n","if __name__ == \"__main__\": # 演算法測試\n","   \n","    ai_Algo = AI_Algo()\n","    X_test = ai_Algo.load_image_files(r\"/content/drive/MyDrive/Data/connect_speed_test/\")\n","    \n","   \n","    model_name = ai_Algo.loadModel(\"/content/RGB_SVM_Best_Model.sav\")\n","    start = time.time()\n","    x = ai_Algo.predict(model_name,X_test)\n","    end = time.time()\n","    print(end-start)\n","    print(x)\n","    "],"execution_count":17,"outputs":[{"output_type":"stream","text":["__init__\n"],"name":"stdout"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-b17653330684>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    517\u001b[0m     \u001b[0mmodel_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mai_Algo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloadModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/RGB_SVM_Best_Model.sav\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m     \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 519\u001b[0;31m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mai_Algo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    520\u001b[0m     \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    521\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-b17653330684>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, model_name, X_test)\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    430\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 431\u001b[0;31m         \u001b[0mprobability\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    432\u001b[0m         \u001b[0my_pred_probability\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprobability\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    433\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/metaestimators.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, type)\u001b[0m\n\u001b[1;32m    108\u001b[0m                     \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m                     \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdelegate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mattribute_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m                     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    634\u001b[0m         \u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m         \"\"\"\n\u001b[0;32m--> 636\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    637\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_predict_proba\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    638\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_check_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    601\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprobability\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m             raise AttributeError(\"predict_proba is not available when \"\n\u001b[0m\u001b[1;32m    604\u001b[0m                                  \" probability=False\")\n\u001b[1;32m    605\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_impl\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'c_svc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'nu_svc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: predict_proba is not available when  probability=False"]}]}]}